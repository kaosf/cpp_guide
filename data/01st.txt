include:"imgdata.txt"
sakuya_oko:"本格的なC++プログラミングに入っていきます"
ozyou_oko:"うむ"
sakuya_oko:"前回言ったようにC++のプログラムはint main()から始まり上から順に処理していきます"
sakuya_niya:"正確には';'毎に処理されるんですけどね"
ozyou_odo:"';'毎とは？"
sakuya_niya:"前回作ったプログラムありますよね。以下のコードでもいけます"
start:
#include<iostream>
int main()
{
    std::cout<<
    "hello world"
    <<std::endl;
}
end:
sakuya_wara:"#includeなどの#で始まる命令は行が大事になってくるのですが、int main()などは改行は空白として扱われます"
ozyou_odo:"int main(){std::cout&lt;&lt;&quot;hello world&quot;&lt;&lt;std::endl;}でもいいってこと？"
sakuya_wara:"そのとおりです"
ozyou_oko:"ところで今のところ出力だけやったよね、何かプログラムらしいことないの"
sakuya_oko:"まずは変数の宣言です"
ozyou_odo:"ああ、数学で出てくるあれみたいな"
sakuya_wara:"ようはデータを格納する箱みたいなやつですね"
ozyou_oko:"ふむ…"
sakuya_oko:"例えば以下のようにします"
start:
int main()
{
    int a = 10;
    double b = 20;
}
end:
ozyou_odo:"どういうこっちゃ"
sakuya_oko:"今から説明しますが、一つ大事なことがあって、データには「型」と呼ばれる分類分けがあります"
ozyou_odo:"型？"
sakuya_wara:"変数aとbがあったときaが文字列でbが数字だったらa+bとかしたときに困りますよね"
ozyou_wara:"なるほど"
sakuya_oko:"型、変数名の順番で書くことで変数を「今から使いますよ」宣言します"
ozyou_wara:"「=」は数学での=とどう違うの？"
sakuya_wara:"C++では「=」は代入演算子と言われ、右の値を左に代入します"
start:
#include<iostream>

int main()
{
    int a = 10;
    int b = 20;
    a = 30;
    int c = a + b;
    std::cout<<c<<std::endl;
}
end:
ozyou_odo:"初期化だけでなく途中で値を代入してもいいのね"
sakuya_oko:"その通り。またcにはaとbを足したものを代入しています"
ozyou_oko:"絶対に初期化しないといけないの？"
sakuya_wara:"いえ、別に初期化しなくても大丈夫です"
sakuya_oko:"ただ代入以外のことをするには予め何らかの値を入れておいてください"
ozyou_oko:"ふむ…"
ozyou_wara:"ところで型ってどんだけあるの？"
sakuya_wara:"あとで説明しますが作ろうと思ったらいくらでも作れます<br />"
continue:"ただ基本の型というものはあります"
start:
int main()
{
    int a = 10;//4Byte整数型
    double b = 1.23;//8Byte浮動小数点型
    char c = 'a';//1Byte文字型
    unsigned int d = 12345;//非負整数型
}
end:
ozyou_odo:"「//」って何？"
sakuya_odo:"あ、説明忘れてました。「//」で行端までコメントとなり無視されます"
ozyou_wara:"4つ目は「unsigned int」で一つの型なのね"
sakuya_wara:"そのとおりです。複数の名前の複合の型も存在します"
ozyou_wara:"unsigned、つまり符号がないから非負整数、と"
sakuya_wara:"この他にも「const」を付けることで定数にすることができます"
start:
int main()
{
    const int x = 10;//10の値を持つ定数x
    int const y = 20;//type constでもいける
}
end:
ozyou_odo:"定数ということは代入できないわけね"
sakuya_oko:"代入しようとするとコンパイルエラーになります"
ozyou_odo:"コンパイルエラー？"
sakuya_oko:"C++ではC++の構文に合わないコードはエラーを吐いて実行ファイルの作成に失敗します"
ozyou_oko:"そもそもコンパイルって何よ"
sakuya_oko:"実行ファイルを作る過程―ビルドと言うのですが―は何段階かあって、C++のソースコードを機械語に翻訳するフェイズがコンパイルですね"
ozyou_wara:"VS2013が「翻訳できないよー」って文句を言うわけね"
sakuya_wara:"この場合だと正確には「定数に代入しようとしてるけどできないからエラーにするよ」ですね"
ozyou_odo:"コンパイルエラーにも色々あるのね"
sakuya_oko:"極まってくるとコンパイル中にコンパイルにつかうメモリ使い果たしてエラーになりますからね"
ozyou_odo:"ヤバそう"
sakuya_odo:"ヤバイ"
ozyou_wara:"ところで二つ目のコードで「+」が出てきてるけど足し算があるなら当然掛け算、引き算、わり算もあるよね？"
sakuya_odo:"当然です。演算子にもいろいろありますがまずは以下の演算子が使えればいいと思います"
start:
int main()
{
    int a = 1 + 2;//intとintの足し算、3になる
    int b = 2 - 1;//intとintの引き算、1になる
    int c = 2 * 3;//intとintの掛け算、6になる
    int d = 5 / 3;//intとintの割り算、1になる
    int e = 8 % 3;//intとintの剰余　、2になる
}
end:
ozyou_oko:"4つ目はintに入れてるから1になるの？"
sakuya_oko:"いいえ、intとintの割り算の結果もまたintになるのでdoubleに代入するとしても1です"
ozyou_odo:"計算の結果にも型はあるのね"
sakuya_oko:"1や2などの数字にも型はありますし計算の結果にも型はあります"
sakuya_wara:"それを利用して変数の型を初期値で推論する方法もあります"
start:
int main()
{
    auto x = 1 + 3;//intとintの足し算なので結果はint型、よってxはint型
    auto y = 2.0 * 3.0;//doubleとdoubleの掛け算なので結果はdouble型、よってyはdouble型
}
end:
ozyou_oko:"autoで自動で型を決定してくれるわけね<br />"
continue:"ところでこれなにに使うの"
sakuya_wara:"そのうちに便利に使う方法も出てきます"
ozyou_oko:"なるほど"
ozyou_wara:"ところでこれだけだとプログラムらしいことできないよね、プログラムっぽいことしたいんだけど"
sakuya_wara:"そうですね、if文とfor文とwhile文の説明をしましょうか"
start:
int main()
{
    int n = 10;
    if(n < 20)
    {
	n = 20;
    }
    else
    {
	n = n / 2;
    }

    for(int i = 1 ; i <= 10 ; ++i)
    {
	n += i ;
    }

    while(n != 1)
    {
	n = n / 2;
    }
}
end:
ozyou_odo:"なんじゃこの新しいキーワードのオンパレードは"
sakuya_odo:"一つのソースコードに詰めるだけ詰めました"
ozyou_oko:"まずifっての教えて"
sakuya_oko;"ifの後の括弧の中がtrueならその次の{}内の文が実行、そうでない場合はelse文が実行されます"
ozyou_oko:"elseはいるの？"
sakuya_oko:"別になくても大丈夫です、使いたかったら使いましょうという話です"
ozyou_oko:"今「true」って言ったけど、これはまた別な型なのね"
sakuya_wara:"はい、真偽値(trueかfalse)を表すbool型が必要となります"
ozyou_wara:"ということは「&lt;」は結果はbool型なのね"
sakuya_wara:"そうなります。「&lt;」や「==」は比較演算子と言われます。以下が比較演算子です"
start:
int main()
{
    bool a = (2 < 3);//2は3より小さいのでtrue
    bool b = (2 > 3);//2は3より大きくないのでfalse
    bool c = (4 <= 2);//4は2以下ではないのでfalse
    bool d = (4 >= 2);//4は2以上なのでtrue
    bool e = (2 == 2);//2と2は等しいのでtrue
    bool f = (2 != 2);//「2と2は等しくない」わけではないのでfalse
}
end:
ozyou_odo:"だんだん例がテキトーになってない？"
sakuya_naki:"考えるのが面倒くさいんですよ"
ozyou_wara:"メイドのつらみね(？)"
ozyou_oko:"次にforとやらを教えてもらおうかしら"
sakuya_oko:"forは繰り返しですね。"
